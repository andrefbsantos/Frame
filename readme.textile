
h1. Time Tracking Procedure

Time reporting is one of the most important activity that every collaborator of Imaginary Cloud must perform. It ensures that all costs are assigned to the correct activities. This is the base of all decision making affecting proposals, on-going projects and even the design of internal procedures.

As Imaginary Intra is the official tool for Project Management on Imaginary Cloud, time must be reported in an issue open for the task at hand. This means that every collaborator *must never start working on a tasks* without having an issue open for it. This includes tasks specific to project, proposals or management (i.e. interviews, coaching, etc).

Some projects require team members to report time on an external tool (e.g. Assembla, Pivotal Tracker, Excel, etc), with specific rules for that project. Nevertheless, the cost is calculated internally through Imaginary Intra. As a result, the team member must also report the time on this tool.

Time spent on an issue includes understanding the issue, meetings clarifying scope, design of the technical solution, coding, testing, etc. 

Try to group project tasks to take chunks of half a day or a full day. At the end of day, 8h should be distributed among the issues worked during the day.

Because projects have different billing cycles, *time should be reported at the end of the working day*.

You must also book time spent on Holidays and Absences, in the same way as in project issues, in the "Holidays and Absences project":/projects/holidays-absences/wiki.

h4. The following tools are proposed to track time during the day:

* Linux
** "Hamster":http://projecthamster.wordpress.com/
* Web
** "Online Stop Watch":http://www.online-stopwatch.com/
* Mac
** "On the job":http://stuntsoftware.com/onthejob/



h1(#top). Project setup

All projects must have a git repository by codebase, continuous integration, automated code review, and use virtual machines for development.

# "Create the project git repository":#git_repository (Bitbucket)
# "Setup local git":#local_git
# "Install, configure and test the virtual machine":#vagrant_ansible (Vagrant + Ansible)
# Configure continuous integration
# Configure automated code review
# "Go live":#go_live (WIP)


h2(#git_respository). Create the project git repository


# https://bitbucket.org/imaginarycloud/
# Repositories -> Create repository
# Set imaginarycloud as owner

p>. "Top":#top

h2(#local_git). Setup local git

h3. Setup local directory (Create directory for the project, Initialize a git repo and add a remote)

# mkdir path/to/new/project
# cd path/to/new/project
# git init
# git remote add origin git@bitbucket.org:imaginarycloud/*project_name*.git
# Commit away!

p>. "Top":#top

h2(#vagrant_ansible). Install, configure and test the virtual machine

* We use "Vagrant":https://en.wikipedia.org/wiki/Vagrant_(software) to configure virtual development environments. It is used as a wrapper around "VirtualBox":https://www.virtualbox.org/ virtualization software.
* "Ansible":https://en.wikipedia.org/wiki/Ansible_(software) is a software platform for configuring and managing computers. We use it together with Vagrant for configuration management.

h3. Install VirtualBox

pre. https://www.virtualbox.org/wiki/Downloads

pre. https://www.vagrantup.com/downloads.html

h3. Install Vagrant

pre. https://www.vagrantup.com/downloads.html

h3. Install Ansible (mac)

pre. $ brew install ansible


h2. Look for configuration examples on the "vagrant_ansible_examples":/vagrant_ansible_examples folder

To try the examples, just copy the files from the example you choose to your project git base folder and do:


* Start the machine (The first time it will take some minutes to load everything)

pre. $ vagrant up

Note: Sometimes (depending of the Vagrantfile configuration, the script might ask you for your host machine password. This only happens if a private network and NFS shared folders are configured on the Vagrantfile.
This is a good practice for bigger projects because it speeds up the disk access on the shared folders.

If all goes well, you should now be able to access the guest machine services on the localhost port or private IP defined on the "Vagrantfile"
To access the machine via ssh you can do:

pre. $ vagrant ssh

Now you can see that the "/vagrant" folder of the machine is in sync with yout base project folder on the host machine.


* Stop the machine

pre. $ vagrant halt


* Destroy the machine

pre. $ vagrant destroy


p>. "Top":#top

h2(#go_live). Go Live

*a paragraph about the importance of going live*

Denpeding if it is a web project, a mobile project or both, several actions need to be taken into account before going live.

Here is a list of the most relevant ones:

h3. Web applications

For Web applications, the following list is important:

* Setup meta information
** For search engines consider at least <a href="https://moz.com/learn/seo/meta-description" target="_blank">meta description</a> and <a href="https://moz.com/learn/seo/title-tag" target="_blank">title</a>
** For social networks consider at least og:title, og:url, og:description and og:image, as seen here <a href="https://developers.facebook.com/docs/sharing/best-practices" target="_blank">here</a>. The result can be tested <a href="https://developers.facebook.com/tools/debug/og/object/" target="_blank">here</a>, and the guidelines for og:image can be seen <a href="https://developers.facebook.com/docs/sharing/best-practices#images" target="_blank">here</a>.

h3. Setup Exception Notification with Redmine

p>. "Top":#top
